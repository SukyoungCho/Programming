Complete the profiling part of the assignment using java flight recorder before 
answering the following questions.

1.) What can you tell about the performance of your hash table implementation compared to Java's tree map? Explain why it is better/worse.
	According to the analysis of Java Flight Recorder, Java built-in Treemap, which is implemented with a Red-Balck tree, has demonstrated less efficiency in insertion and retrieval than the HashMap which is implemented with an ArrayList of LinkedLists (Bucket algorithm). They were tested on Profile.java with numeric arguments of 9 millions, since the desktop was not able to run with the number of 10 millions (must be lack of memory). According to the 'Hot methods' of the Java Mission Control with settings = Profile (screenshot_001 & 002), a put method of Hashtable took 7.22% which is more than 5 times less than the put of Treemap, 39.95%. Moreover Hashtable.get displayed an extreme efficiency which only resulted in 1 sample count and 0.23% while Treemap.get resulted in 39.28%. According to screenshot_003 and 004, compilation with a setting = heap_stats.jfc also culminated in a similar result (Treemap.put 41.01% and Treemap.get 38.25% while Hashtable.put only took 8.29%). The result tells me that Hashtable leads to far more efficienct data structure than red-black tree. Although I have not implemented resize() merthod externally (I have implemented inside the put method), TreeMap.fixAfterInsertion takes 4.15%, which is almost half of put method of my Hashmap. Red-Black tree seem to take much more time than HashMap, since it might fix after almost every insertion although Hashmap fixes (resizes) itself once the size of inputs exceeds the loadfactor. Unlike the Treemap, the Hashmap does not even to resize if an appropriate table size and a load facor were given when it was created.
	
2.) What did you observe in java mission control to come to the conclusion above?
	As mentioned above, I have observed the sample count and percentage of each method for the TreeMap and Hashtable. In overall, Treemap put and get methods displayed in a profile setting 79.23% and in a heap_stat.jfc setting 79.26% out of 100%. I think it could be interpreted that TreeMap is less efficient than Hashtable in general. Since the TreeMap spends a lot more time and memory for the same methods, it seems reasonable to conclude that a Hashtable is more functional. It would lead to the totally different result if the Hashtable was implemented in a different way. For example, if the Hashmap had a table of an array and adopted a linear-probing method to handle the collisions instead, then the Hashtable could be result in the worse productivity.